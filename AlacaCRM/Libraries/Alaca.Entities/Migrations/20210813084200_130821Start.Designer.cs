// <auto-generated />
using System;
using Alaca.Entities.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alaca.Entities.migrations
{
    [DbContext(typeof(Alaca_CRMContext))]
    [Migration("20210813084200_130821Start")]
    partial class _130821Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Turkish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alaca.Entities.Concrete.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ActivityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("NextActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ActivityType", b =>
                {
                    b.Property<Guid>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActivityTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte?>("IsContactExist")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsCustomerExist")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsEmployeeExist")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsLocationExist")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsProjectExist")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.BarcodeType", b =>
                {
                    b.Property<int>("BarcodeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarcodeTypeCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BarcodeTypeName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BarcodeTypeId");

                    b.ToTable("BarcodeTypes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CityCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CityName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Configuration", b =>
                {
                    b.Property<string>("ConfigurationCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConfigurationDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ConfigurationValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConfigurationCode");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContactStatuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Explanation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobilePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OfficePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OfficePhoneNumberInternalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SureName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactStatuId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ContactStatu", b =>
                {
                    b.Property<Guid>("ContactStatuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContactStatuName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactStatuId");

                    b.ToTable("ContactStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ContactType", b =>
                {
                    b.Property<Guid>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContactTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Currency", b =>
                {
                    b.Property<Guid>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte?>("AmountDecimalPlaces")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CurrencyValue", b =>
                {
                    b.Property<Guid>("CurrencyValuesId")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Parity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("CurrencyValuesId");

                    b.ToTable("CurrencyValues");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomField1")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomField2")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomField3")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<Guid?>("CustomerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("CustomerRelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerStatuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CustomerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("IbanNo1")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("IbanNo2")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCandidate")
                        .HasColumnType("bit");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxAdministration")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebSite")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerGroup", b =>
                {
                    b.Property<Guid>("CustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerGroupName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerGroupId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerLocation", b =>
                {
                    b.Property<Guid>("CustomerLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerLocationId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerLocationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainAddress")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerLocationId1");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("CustomerLocations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerRelation", b =>
                {
                    b.Property<Guid>("CustomerRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRelationName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerRelationId");

                    b.ToTable("CustomerRelations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerStatu", b =>
                {
                    b.Property<Guid>("CustomerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerStatusName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerStatusId");

                    b.ToTable("CustomerStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DepartmentName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.District", b =>
                {
                    b.Property<Guid>("Districtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Districtd");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("CanLogin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfStart")
                        .HasColumnType("date");

                    b.Property<Guid>("DepartmanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepartmanID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EMail");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PositionID");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.EmployeePosition", b =>
                {
                    b.Property<Guid>("EmployeePositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeePositionID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeePositionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EmployeePositionName");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeePositionId");

                    b.ToTable("EmployeePosition");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ExpenseCard", b =>
                {
                    b.Property<Guid>("ExpenseCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExpenseCardCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ExpenseCardName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialCode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseCardId");

                    b.ToTable("ExpenseCards");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefaultCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultCurrencyID");

                    b.Property<short?>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LanguageCulture")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageStringLocaleCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.LocaleStringResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResourceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.LocationType", b =>
                {
                    b.Property<Guid>("LocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationTypeName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LocationTypeId");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MainMenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MainMenuID");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MenuName");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("MenuId");

                    b.HasIndex("MainMenuId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.MilestoneStatu", b =>
                {
                    b.Property<Guid>("MilestoneStatuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MilestoneStatuName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MilestoneStatuId");

                    b.ToTable("MilestoneStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethodCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PaymentMethodName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PositionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CurrencyValue")
                        .HasColumnType("float");

                    b.Property<Guid?>("CustomerContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProjectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("ProjectFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("ProjectStatuId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProjectTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ProjectDocument", b =>
                {
                    b.Property<Guid>("ProjectDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectDocumentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("Size")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectDocumentId");

                    b.ToTable("ProjectDocuments");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ProjectMilestone", b =>
                {
                    b.Property<Guid>("ProjectMilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("MilestoneActualFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MilestoneActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MilestoneTargetFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MilestoneTargetStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectMilestoneName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte?>("ProjectMilestoneStatuId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ProjectMilestoneTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("SubContratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubcontratorTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectMilestoneId");

                    b.ToTable("ProjectMilestones");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ProjectMilestoneStatu", b =>
                {
                    b.Property<byte>("ProjectMilestoneStatuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectMilestoneStatuName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectMilestoneStatuId");

                    b.ToTable("ProjectMilestoneStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ProjectMilestoneType", b =>
                {
                    b.Property<byte>("ProjectMilestoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectMilestoneTypeName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectMilestoneTypeId");

                    b.ToTable("ProjectMilestoneTypes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ProjectStatu", b =>
                {
                    b.Property<byte>("ProjectStatuId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectStatuName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectStatuId");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Rayon", b =>
                {
                    b.Property<Guid>("RayonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RayonCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RayonName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RayonId");

                    b.ToTable("Rayons");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.SalesOffer", b =>
                {
                    b.Property<Guid>("SalesOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CurrencyValue")
                        .HasColumnType("float");

                    b.Property<Guid?>("CustomerContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelectedOffer")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ReviseNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SalesOfferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SalesOfferFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesOfferNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("SalesOfferStatuId")
                        .HasColumnType("tinyint");

                    b.Property<double>("SalesOfferTaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("SalesOfferTotal")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalesOfferId");

                    b.ToTable("SalesOffers");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.SalesOfferLine", b =>
                {
                    b.Property<Guid>("SaleOfferLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CurrencyValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<double>("DiscountTotal")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LineType")
                        .HasColumnType("tinyint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("SaleOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<double>("TaxTotal")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SaleOfferLineId");

                    b.ToTable("SalesOfferLines");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.SalesOfferStatu", b =>
                {
                    b.Property<byte>("SalesOfferStatuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SalesOfferStatuName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalesOfferStatuId");

                    b.ToTable("SalesOfferStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Sector", b =>
                {
                    b.Property<Guid>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SectorName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ServiceCard", b =>
                {
                    b.Property<Guid>("ServiceCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceCardCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ServiceCardName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SpecialCode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceCardId");

                    b.ToTable("ServiceCards");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxStockLevel")
                        .HasColumnType("float");

                    b.Property<double?>("MinStockLevel")
                        .HasColumnType("float");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("ShelfLife")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ShelfLifeType")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpecialCode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("StockBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid?>("StockGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("StockRayonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockStatuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockBarcode", b =>
                {
                    b.Property<Guid>("StockBarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Barcode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PartyCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("StockBarcodeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockBarcodeId");

                    b.ToTable("StockBarcodes");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockBrand", b =>
                {
                    b.Property<Guid>("StockBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StockBrandCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StockBrandName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockBrandId");

                    b.ToTable("StockBrands");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockGroup", b =>
                {
                    b.Property<Guid>("StockGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StockGroupCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("StockGroupMainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockGroupName")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockGroupId");

                    b.ToTable("StockGroups");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockStatu", b =>
                {
                    b.Property<Guid>("StockStatuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StockStatuName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockStatuId");

                    b.ToTable("StockStatus");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockUnit", b =>
                {
                    b.Property<Guid>("StockUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<double?>("Mass")
                        .HasColumnType("float");

                    b.Property<double?>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("SpecialCode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialCode3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockUnitDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockUnitName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("StockUnitId");

                    b.ToTable("StockUnits");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.StockUnitDefinition", b =>
                {
                    b.Property<Guid>("StockUnitDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StockUnitDefinitionCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StockUnitDefinitionName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockUnitDefinitionId");

                    b.ToTable("StockUnitDefinitions");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.SubContratorTeam", b =>
                {
                    b.Property<Guid>("SubContratorTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SubcontratorTeamName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubContratorTeamId");

                    b.ToTable("SubContratorTeams");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EMail");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleID");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int")
                        .HasColumnName("UserStatusID");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserDepartmentPermission", b =>
                {
                    b.Property<Guid>("UserDepartmentPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserDepartmentPermissionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartmentPermissions");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserLoginInfo", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("Languages")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK_CustomerLoginInfo");

                    b.ToTable("UserLoginInfo");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserRoleName");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserRoleMenu", b =>
                {
                    b.Property<Guid>("UserRoleMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleMenuID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleID");

                    b.HasKey("UserRoleMenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("UserRoleMenu");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZoneName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ZoneId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Contact", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.ContactStatu", "ContactStatu")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactStatuId");

                    b.HasOne("Alaca.Entities.Concrete.ContactType", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("Alaca.Entities.Concrete.CustomerLocation", "CustomerLocation")
                        .WithMany()
                        .HasForeignKey("CustomerLocationId");

                    b.HasOne("Alaca.Entities.Concrete.Department", "Department")
                        .WithMany("Contacts")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Alaca.Entities.Concrete.Position", "Position")
                        .WithMany("Contacts")
                        .HasForeignKey("PositionId");

                    b.Navigation("ContactStatu");

                    b.Navigation("ContactType");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerLocation", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.City", "City")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CityId");

                    b.HasOne("Alaca.Entities.Concrete.CustomerLocation", null)
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CustomerLocationId1");

                    b.HasOne("Alaca.Entities.Concrete.District", "District")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Alaca.Entities.Concrete.LocationType", "LocationType")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("LocationTypeId");

                    b.HasOne("Alaca.Entities.Concrete.Zone", "Zone")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("ZoneId");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("LocationType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.District", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Menu", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.Menu", "MenuItem")
                        .WithMany("Menus")
                        .HasForeignKey("MainMenuId");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.User", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.Employee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserDepartmentPermission", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Alaca.Entities.Concrete.User", "User")
                        .WithMany("UserDepartmentPermissions")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.UserRoleMenu", b =>
                {
                    b.HasOne("Alaca.Entities.Concrete.Menu", "Menu")
                        .WithMany("UserRoleMenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.City", b =>
                {
                    b.Navigation("CustomerLocations");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ContactStatu", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.CustomerLocation", b =>
                {
                    b.Navigation("CustomerLocations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.District", b =>
                {
                    b.Navigation("CustomerLocations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.LocationType", b =>
                {
                    b.Navigation("CustomerLocations");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Menu", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("UserRoleMenu");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Position", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserDepartmentPermissions");
                });

            modelBuilder.Entity("Alaca.Entities.Concrete.Zone", b =>
                {
                    b.Navigation("CustomerLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
